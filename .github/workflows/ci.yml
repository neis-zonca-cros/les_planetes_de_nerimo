name: CI Pipeline Nérimo

on:
  push:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Installation Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Add temporary IP access
        run: |
          response=$(curl -u "${{ secrets.ATLAS_USERNAME }}:${{ secrets.ATLAS_PASSWORD }}" --digest \
            -H "Content-Type: application/json" \
            -X POST "https://cloud.mongodb.com/api/atlas/v1.0/groups/${{ secrets.ATLAS_GROUP_ID }}/accessList" \
            --data '[
              { "ipAddress": "0.0.0.0/0", "comment": "Temporary access for CI/CD" }
            ]')
          accessListId=$(echo $response | jq -r '.results[] | select(.comment == "Temporary access for CI/CD") | .links[0].href | split("/") | .[-1]')
          echo "Access list ID: $accessListId"
          echo "accessListId=$accessListId" >> $GITHUB_ENV
    
      - name: Création fichier .env.test
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> back_nerimo/.env.test
          echo "NODE_ENV=test" >> back_nerimo/.env.test
          echo "PORT=3001" >> back_nerimo/.env.test
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> back_nerimo/.env.test

      - name: Install dependencies and run tests back
        run: |
          cd back_nerimo 
          npm install 
          npm run test:connexion
                
      - name: Remove temporary IP access
        if: always()
        run: |
          curl -v -u "${{ secrets.ATLAS_USERNAME }}:${{ secrets.ATLAS_PASSWORD }}" --digest \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --request DELETE "https://cloud.mongodb.com/api/atlas/v1.0/groups/${{ secrets.ATLAS_GROUP_ID }}/accessList/${accessListId}"
            
      - name: Installation Expo 
        run: npm install -g expo-cli

      # Linters en Back et Front
      - name: Install and run linters
        run: |
          # Install dependencies for back-end
          cd back_nerimo
          npm install
          npm run lint

          # Install dependencies for front-end
          cd ../front_nerimo
          npm install
          npm install --save-dev eslint-config-expo
          npm run lint




   
